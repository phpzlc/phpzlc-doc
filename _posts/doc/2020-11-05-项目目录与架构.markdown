---
title: 目录与架构
permalink: doc/skeleton
---

## 目录文件作用介绍

/bin/console  控制台命令入口  用法 *php bin/console*

/config 配置文件

/config/bundles.php 注册Bundle

/config/routes.yaml 根路由配置文件

/config/services.yaml 服务配置文件

/config/routes 路由配置文件 (在此目录下的配置路由会自动引入）

/config/packages 包配置文件 (在此目录下的配置文件会自动引入）

/config/packages/dev 开发环境下配置文件

/config/packages/prod 生产环境下配置文件

/config/packages/dev 测试环境下配置文件

/migrations 数据库迁移记录，执行`migrations`相关的命令时会记录每次数据库变更的具体sql;

/public  对外开放目录

/publuc/index.php 项目入口

/src 开发目录

/src/Kernel.php 内核，可以通过修改他，将不同的资源引入到项目中

/src/Entity 实体，定义数据库结构

/src/Repository 实体操作类，相当于model层

/src/DataFixtures 内置数据类目录

/src/Controller 控制器目录

/src/Document 文档目录

/src/Document/Config.php 文档配置文件

/src/Business 业务目录

/templates 模版目录

/tests 测试目录

/translations 翻译目录

/var 临时文件目录

/vendor 第三方组件库

.env 项目默认环境变量

.env.test 测试环境默认环境变量

.env.local 本地环境默认环境变量, 这里面定义的值会覆盖.env和.env.test定义的相同名称的环境值

.gitignore 定义git忽略哪些文件

composer.json composer版本控制配置文件

composer.lock  composer版本锁定文件

symfony.lock symfony版本锁定文件

README.md 项目说明

## PhpZlc对目录的变更及架构意义

1. src/Business 

    这个目录是PhpZlc生成的目录,主要用于书写复杂的业务代码。
    
    我们不希望这个目录被滥用,他应该存放的是逻辑缜密，复杂，复用率高的核心代码。
    
    我们试想了几种他可能被滥用的场景：
    
    1. 规定Controller只允许接收参数，所有的功能在Business中实现。
    
    2. 诉求Business和Repository一样和Entity建立一对一的关联关系。
    
    3. 诉求在Business中集成统一的插入、编辑、删除、验证方法，因为他们是基本的业务且代码重复率高。
    
    4. 由于Business层提供了书写逻辑的天然理论性和优势性，如果存在可能的话，会将可以复用的代码都塞入到Business中，以希望可以复用。
   
    相信我，以上的做法都是没有什么意义的，也纯粹是给自己找麻烦。
    
    1. 过多的封装只是无用功
    
    2. 程序是人来书写的，符合自己心理认知的代码才是身心娱乐的。
    
    3. 好的技术应该是帮助人们减少负担的，好的架构是容许弯路的。

    4. 万变不离其宗，把握编程核心。
    
2. src/Document 

    这个目录是PhpZlc生成的目录,主要用于书写API文档。
    
3. src/DataFixtures

    这是目录用于加载内置数据的操作类型。
   


