---
title: 控制器(Controller)
permalink: doc/controller
---

## 前言

官方文档：[https://symfony.com/doc/4.4/controller.html](https://symfony.com/doc/4.4/controller.html)

Controller主要用于处理接收数据和处理数据。在这两者之间，可以执行逻辑代码。一般情况下，不建议在Controller书写逻辑代码。Controller只应该存在复用程度低，简单的业务逻辑或者业务代码的具体整合。

## Controller继承基类(SystemBaseController)

官方默认的集成基础类为```Symfony\Bundle\FrameworkBundle\Controller\AbstractController;```。

PHPZLC在此基础上增加了新的特性，增加了新的基类```PHPZlc\PHPZlc\Bundle\Controller\SystemBaseController```，用于管理项目的写法。

```shell
use PHPZlc\PHPZlc\Bundle\Controller\SystemBaseController;

class IndexController extends SystemBaseController

public function inlet($returnType = SystemBaseController::RETURN_HIDE_RESOURCE, $isLogin = true)
{
    return parent::inlet($returnType, $isLogin);
}
```

1. function inlet

    **定义**
    
    接口入口方法，需要在每个接口中主动调用，成功则返回`true`,失败则直接返回http响应。
    
    **作用**
    
    用于每个接口的前置方法，用于鉴权，设置等等操作。
    
    **接口中写法**
    
    ```shell
    public function index()
    {
        $r = $this->inlet();
        if($r !== true){
            return  $r;
        }

        return new Response('<h1>演示项目</h1>');
    }
    ```

2. returnType

    **定义**
    
    returnType 为接口响应类型，有两个选项`SystemBaseController::RETURN_HIDE_RESOURCE`(隐性的)`RETURN_SHOW_RESOURCE`(现形)。
    
    **作用**
    
    隐性的主要用于返回数据信息的接口，这类返回不直接呈现在客户面前，例如APP-API请求，或者网站AJAX请求。
    
    显性的主要用于返回页面信息的接口，这类返回直接渲染呈现在客户面前，例如返回资源流，页面等。
    
    _通过明确定义返回响应类型，可以在入口方法中或其他底层可以根据此值进行判断，从而返回正确的响应，以提高体验。常用在入口方法鉴权失败之后，如果是显示的可以让其返回登录授权等页面，如果是隐性的可以返回错误码_
    
    **要求**
    
    必须在每个接口中对其进行准确的指定。
    
    **可使用的方法**  
    
    ```shell
    SystemBaseController::setReturnType($returnType)
    
    SystemBaseController::getReturnType()
    ```
        
3. isLogin

   **定义**

   是否强制要求登录。

## 请求(Request)

官方文档: [https://symfony.com/doc/4.4/components/http_foundation.html](https://symfony.com/doc/4.4/components/http_foundation.html)

1. 常用方法

    ```shell
    use PHPZlc\PHPZlc\Bundle\Controller\SystemBaseController;
    
    use Symfony\Component\HttpFoundation\Request;
    
    class IndexController extends SystemBaseController
    {
        public function request(Request $request)
        {
            //获取参数
            dump($request->get('param'));
    
            //获取get参数
            dump($request->query->get('param'));
    
            //获取post参数
            dump($request->request->get('param'));
    
            //获取请求类型 GET | POST
            dump($request->getMethod());
    
            //获取当前网络根地址
            dump($request->getSchemeAndHttpHost() . $request->getBaseUrl());
    
            //得到当前路由名
            dump($request->get('_route'));
            
        }
    }
    ```
2. 从服务中获取Request对象
```shell
$request = $this->get('request_stack')->getCurrentRequest();
```

## 响应

PHPZLC在原有基础上集成了最常见的API接口响应,定义了返回的基本格式及code码。

1. 调用

    ```shell
    use PHPZlc\PHPZlc\Responses\Responses;
    
    public function responsesError()
    {
        return Responses::error('操作失败');
    
    }
    public function responsesSuccess()
    {
        return Responses::success('操作成功');
    }
    ```

2. 返回格式 (可以通过后面的参数进行选择)
```shell
{"code":1,"msg":"\u64cd\u4f5c\u5931\u8d25","msgInfo":[],"data":[]}
```

3. code默认规定
```shell
0 成功
1 常规错误
-1 鉴权失败
```

4. 自定义code码

    可以通过方法后面的参数进行设置

5. 替换默认code值和其他默认参数

    可以在环境变量中通过设置环境变量进行变更
    
    配置文件地址`.env`

    ```shell script
       API_SUCCESS_CODE: 成功code码
       API_ERROR_CODE: 错误code码
       API_RESPONSE_TYPE: 响应数据类型
    ```
   
 6. 第一个参数还支持传入Error对象；方法内部会自动的读取Error中的code和错误值进行填充。更多信息请了解[错误收集系统](#)