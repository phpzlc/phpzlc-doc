---
title: 后台内核(Admin)
permalink: doc/module/admin
author_no: 2
prev_page: /doc/module/vendor
next_page: /doc/module/upload
description_auto: 0
description: 后台内核,为后台业务提供底层策略,写法支持.(导航菜单,基础页面)
tags: admin,phpzlc/admin,后台
---

## 业务介绍

后台内核,为后台业务提供底层策略,写法支持.(导航菜单,基础页面,导入,导出等功能)

## 源码地址

[phpzlc/admin](https://github.com/phpzlc/admin)

## 安装

```shell 
composer require phpzlc/admin
```

## 服务引入

   后台控制器需要按照下列来实现基类
   
```php
class AdminController extends SystemBaseController
      {
          /**
           * @var AdminStrategy
           */
          private $adminStrategy;
      
          /**
           * @var string
           */
          private $pageTag;
          
          public function inlet($returnType = SystemBaseController::RETURN_HIDE_RESOURCE, $isLogin = true)
          {
              $this->adminStrategy = new AdminStrategy($this->container);
              $this->adminStrategy->setPageTag($this->pageTag);
              
              return parent::inlet($returnType, $isLogin);
          }
      }
```


## AdminStrategy

   是后台核心机制类,主要用于设置后台系统的基本属性和动作
   
```php

 //菜单配置
$menus = [
    new Menu($title, $ico, $tag, $url, $url_target, [
    new Menu($title, $ico, $tag, $url, $url_target, $childs = array())
    ])
];           
    
$this->adminStrategy = new AdminStrategy($this->container);
    
//设置管理端基本信息(名称,页面标记,菜单......)
$this->adminStrategy
    // 设置后台标题
    ->setTitle('admin')
    // 设置后台入口URL
    ->setEntranceUrl($this->generateUrl('admin_manage_index'))
    // 设置后台退出登录URL
    ->setEndUrl($this->generateUrl('admin_manage_logout'))
    // 设置修改密码页面URL
    ->setSettingPwdUrl($this->generateUrl('admin_manage_edit_password'))
    // 设置后台页面模式
    ->setMenuModel(AdminStrategy::menu_model_simple)
    // 设置页面标记
    ->setPageTag($this->page_tag)
    // 设置清除缓存API地址url
    ->setClearCacheApiUrl($this->generateUrl('admin_manage_clearCache'))
    // 设置后台favicon_ico图标
    ->setFaviconIco('public/image/100.png')
    // 设置后台logo
    ->setLogo('public/image/200.png')
    // 设置后台导航菜单
    ->setMenus($menus)
    // 设置登陆页面背景图片
    ->setLoginLackGroundImg('public/image/200.png');
```

1. 设置锚点url
   
   用于设置表单提交,取消等需要返回到某个控制器层的action中时,我们可以使用该方法,将action设为锚点,一般在列表中设置。
   
    ```php
    public function setUrlAnchor()
    ```
   
2. 设置页面标记
   
   页面标记配置，需要在菜单相对应配置，用于菜单选项选中后高亮显示。
   
   ```php
   public function setPageTag($tag)
   ```

3. 设置后台标题
   
   ```php
   public function setTitle($title)
   ```

4. 设置后台favicon_ico图标
    
   ```php
   public function setFaviconIco($favicon_ico)
   ```

5. 设置后台logo
    
   ```php
   public function setLogo($logo)
   ```

6. 设置后台入口URL,一般用于返回首页功能

   ```php
   public function setEntranceUrl($entrance_url)
   ```
   
7. 设置退出登录URL
    
   ```php
   public function setEndUrl($end_url)
   ```

8. 设置密码修改页面url
   
   ```php
   public function setSettingPwdUrl($setting_pwd_url)
   ```

9. 设置清除缓存API地址url
   
   ```php
   public function setClearCacheApiUrl(string $clear_cache_api_url)
   ```

10. 设置管理员角色名称
   
   ```php
   public function setAdminRoleName($admin_role_name)
   ```
   
11. 设置登陆页面背景图片
   
   ```php
   public function setLoginLackGroundImg(string $login_lack_ground_img)
   ```
   
12. 设置管理员登录头像

   ```php
   public function setAdminAvatar(string $admin_avatar)
   ```

13. 设置head自定义代码

   ```php
   public function setHendCode(string $hend_code)
   ```

## 面包线配置
        
1. 设置面包线
         
   ```php
   $this->adminStrategy->setNavigations(array $navigations)
   ```

2. 在原有的面包线上添加面包线
     
   ```php
   $this->adminStrategy->addNavigation(new Navigation($title, $url = ''));
   ```
   
## 模式切换

   本框架提供两种后台页面模式.这两种模式可以进行切换,适合不同量级的后台.
   
1. 简单模式(三级菜单,后期可升级为复杂模式)

2. 复杂模式(四级菜单,增加头部菜单,功能划分更精确直观)
      
   ```php
   $this->adminStrategy = new AdminStrategy(ContainerInterface $container);
   $this->adminStrategy->setMenuModel(AdminStrategy::menu_model_simple) // 简单模式 menu_model_simple; 复杂模式 menu_model_all; 
   ```
   
3. 页面效果
   
   简单模式效果
   
   ![简单模式](/assets/posts/admin/model_simple.png)
   
   复杂模式效果
   
   ![复杂模式](/assets/posts/admin/model_all.png)
   
## 设置导航菜单   
   
1. 我们将要显示的导航菜单根据它的层级设置一个多维数组$menus,然后调用
   
   ```php
   $this->adminStrategy->setMenus(array $menus);
   ```
   
2. 比较常用三级层级的导航菜单
   
   ```php
   new Menu('博客管理系统', null, null, null, null, [
          new Menu('博客管理', 'fa fa-clone', null, null, null, [
              new Menu('文章管理', null, 'admin_article_index', $this->generateUrl('admin_blog_manage_article_index'), null),
          ]),
      
   ]);
   ```

## 页面技术栈

   [Vue.js](https://cn.vuejs.org/)
    
   [ElementUI](https://element.eleme.io/#/zh-CN/component/installation)
    
   [Twig](https://www.kancloud.cn/yunye/twig-cn/159454)
    
   [Font图表库](https://fontawesome.dashgame.com/)
    
## 仪表盘基本写法
   
   完整页面请进入[代码参考模板](https://github.com/phpzlc/demo-blog/blob/master/templates/page/statistical-station.html.twig)
   
   页面效果
   
   ![效果](/assets/posts/admin/data.png)

   
## 列表页面基本写法
   
   完整页面请进入[代码参考模板](https://github.com/phpzlc/demo-blog/blob/master/templates/page/list.html.twig)
   
   页面效果
   
   ![效果](/assets/posts/admin/index.png)
   
## 新建/编辑页面基本写法
   
   完整页面请进入[代码参考模板](https://github.com/phpzlc/demo-blog/blob/master/templates/page/edit.html.twig)
   
   主要控件请进入[主要控件参考模板](https://github.com/phpzlc/demo-blog/blob/master/templates/page/control.html.twig)
   
   更多控件请进入[ElementUI](https://element.eleme.io/#/zh-CN/component/input)
   
## 导入功能基本写法

   导入导出功能需要[phpoffice/phpspreadsheet](https://packagist.org/packages/phpoffice/phpspreadsheet)
   
```text
composer require phpoffice/phpspreadsheet
```
   
   **页面层**
   
```php
<el-upload
    class="upload-demo"
    action="导入地址"
    :limit="1"
    :on-success="handleImport"
    :on-error = "handleImport"
    :file-list="fileList">
    <el-button size="small" type="primary">点击上传</el-button>
    <div slot="tip" class="el-upload__tip">只能上传xls/xlsx文件</div>
</el-upload>
    
<script>
    export default {
        methods: {
            handleImport(result){
                const that = this;
                resultPreprocess(that, result, "admin_url_anchor()");
            },
        }
    }
</script>
```

   **控制器层**
   
1. 下载导入模板
   
   ```php
    // Business层
    public function importTemplateFilePath()
    {
            return '模板名称.xlsx';
    }
    
    public function downloadImportTemplate(Request $request)
    {
       $this->goUrl($request->getSchemeAndHttpHost() . $request->getBasePath() . '/存放导入文件的文件夹/' . $this->importTemplateFilePath());
    }

    // Controller层
    $Business  = new Business($this->container);
    $Business->goUrl($Business->downloadImportTemplate(Request $request));
   ```
   
2. 导入模板
   
   ```php
   // Business层
   public function format($data)
       {
           if(empty($data)){
               throw new PhpZlcApiException('导入数据不能为空');
           }
   
           $info = [];
         
           foreach ($data as $index => $value){
               $name = $this->getValue($value, 0);
            
               $info[] = array(
                   'name' => $name
               );
  
           }
           return $info;
       }
   // Controller层
   set_time_limit(0);
   ob_start();
   
   $Business  = new Business($this->container);
   
   /**
      * @var Connection $conn
   */
   $conn = $this->getDoctrine()->getConnection();
   $conn->beginTransaction();
   
   try {
        $data = $Business->importData();
   
        foreach ($data as $k => $v) {
           // 将$data的数据循环插入
           $conn->commit();
        }
   
        return Responses::success('导入成功');
   
   }catch (PhpZlcApiException $exception){
        $conn->rollBack();
        return Responses::error($exception->getMessage());
   }
   ```
   
## 导出功能基本写法

   **页面层**
   
```php
<el-button size="mini" type="success" @click="export_data()">导出</el-button>

<script>
    export default {
        methods: {
            export_data(){
                window.location.href = urlParamWrite(getSelfUrl(), 'ex', '1');
            },
        }
    }
</script>
```
   **控制器层**
   
```php
use PHPZlc\Admin\Strategy\Excel\Export;

$ex = new Export();

// 表格第一行
$head = [];
// 数据库数据
$list = array();

$data = [];
    
foreach ($list as $value){
    $data[] = array(
    // 循环的数据
    );
}
    
/**
    * 导出
    *
    * @param string $title  标题
    * @param array $head 表头 ["表头1", "表头2"]
    * @param array $data 内容 [{"1", "1"}]
    * @param bool $is_need 是否插入序号
    * @param array $mergeCells 合并单元格 [{0,1,0,2})] 0,1 表示合并开始单元格数组坐标, 0,2 代表合并结束单元格数组坐标
    * @param string $format
    * @throws \PhpOffice\PhpSpreadsheet\Exception
*/
$ex->export($title, $head, $data, $is_need = false, $mergeCells = array(), $format = 'Xls');
```

    
