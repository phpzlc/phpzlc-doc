---
title: 创建使用数据库
permalink: doc/db/start
---

## 原文技术资料

[Databases and the Doctrine ORM](https://symfony.com/doc/4.4/doctrine.html)

[Doctrine](https://www.doctrine-project.org/)

## 配置

配置文件: `.env.local`

追加:

```shell
DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7"
```

## 常用命令

1. 创建数据库

    ```shell
    php bin/console doctrine:database:create
    ```
   
2. 创建数据库结构

   ```shell
   php bin/console doctrine:schema:create
   ```
   
3. 更新数据库结构

   ```shell
   php bin/console doctrine:schema:update --force
   ```
   
4. 创建实体及相关资源生成命令
  
   **创建实体**
  
   ```shell
   php bin/console make:entity {entityClassName}
   ```

   `{entityClassName}` _选填_ 未指定的话则对话式询问，询问不指定则对所有实体生效


   **实体创建说明**
   
   1. 通常不建议使用命令行创建实体,直接创建类文件会比较便捷
   
   2. 实体指定id的生成模式时，如果项目现在或将来有分布式的需求，应该使用uuid的形式，否则可以使用自增ID的形式
   
        **UUID 代码模版(推荐方式)**
        
        ```shell
        <?php        
        namespace App\Entity;
        
        use App\Repository\UserRepository;
        use Doctrine\ORM\Mapping as ORM;
        
        /**
         * @ORM\Entity(repositoryClass=UserRepository::class)
         * @ORM\Table(name="admin", options={"comment":"用户表"})
         */
        class User
        {
            /**
             * @var string
             *
             * @ORM\Column(name="id", type="string")
             * @ORM\Id()
             * @ORM\GeneratedValue(strategy="CUSTOM")
             * @ORM\CustomIdGenerator(class="App\Doctrine\SortIdGenerator")
             */
            private $id;
        }
        ```
        
        _PhpZlc对UUID进行了改造，其在保持唯一性的同时，增加了如自增ID一样的排序性，缺点在于最终生成的ID较长，（如果有更好的算法，希望与我们联系）_
        
        **自增ID代码模版**
        
        ```shell
        <?php        
        namespace App\Entity;
        
        use App\Repository\UserRepository;
        use Doctrine\ORM\Mapping as ORM;
        
        /**
         * @ORM\Entity(repositoryClass=UserRepository::class)
         * @ORM\Table(name="admin", options={"comment":"用户表"})
         */
        class User
        {
            /**
             * @var string
             *
             * @ORM\Column(name="id", type="string")
             * @ORM\Id()
             * @ORM\GeneratedValue(strategy="AUTO")
             */
            private $id;
        }
        ```
      
   3. get-set,RepositoryClass
      
      1. 数据库增加新的实体和字段的时候,需要为新增的部分重新生成get-set方法，为新增的实体增加对应的RepositoryClass
    
      2. 数据库删除实体和字段的时候，需要手动移除get-set方法，和删除对应的RepositoryClass
   
      3. 要保证RepositoryClass和Entity保持一对一的关系
   
      4. 要保证get-set方法没有缺少和冗余
   
      **生成get-set,RepositoryClass**
     
      ```shell
      php bin/console make:entity {entityClassName} --regenerate
      ```
     
      **覆盖get-set,RepositoryClass**
     
      ```shell
      php bin/console make:entity {entityClassName} --regenerate --overwrite
      ```
      
      `{entityClassName}` _选填_ 未指定的话则对话式询问，询问不指定则对所有实体生效
   
   4. 在[了解Entity](/doc/db/entity)中我们将深入的讲解Entity的使用技巧和编程定义