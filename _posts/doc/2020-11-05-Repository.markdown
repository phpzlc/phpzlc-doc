---
title: 高级查询
permalink: doc/repository
---

## 概述

高级查询的核心就是规则系统。

规则即查询规则，传入规则，查询系统就会根据规则自动的生成需要的查询SQL，返回查询结果。

这个理念，不是什么高级的想法，对于symfony本身而言，其本身的查询系统，也支持这样去做，并且还有辅助的IDE提示。

但我还是要说，PHPZLC的查询系统在symfony原有的查询系统上做了一次较大的革新，会给你带来的全新的体验。

可以用以下几个词来描绘其带来的变化。

1. **聪明** 
   
    Symfony在进行简单查询的时候十分便捷，但是如果需要连表查询和子查询或者其他的高级查询，就比较麻烦。注意，这里所说的麻烦是建立在面向对象(orm)的写法来说明的。这种写法需要将查询的字段和表绑定，这就导致学习成本和使用成本都十分的困难。那么为什么说PHPZlc让其变得更聪明了呢？ PHPZlc通过读取`Entity`定义的数据库结构和对查询的SQL进行分析，程序自动的建立调用Symfony底层的绑定方法进行绑定。
   
2. **干预**

    我们很难为Symfony增加新的查询规则，也很难对查询的结果进行干预。很多人可能对干预查询结果不太明白，这里我可以举个例子，比如实现假删除，需要给原有的查询语句加上条件语句。PHPZlc本质上还是对于Sql进行拼接，在最好在分析进行绑定Symfony方法的策略，所以在拼接Sql的过程中可以很容易的实现此功能。
   
3. **查询链路打通**

    这个功能我相信会让你眼前一亮，什么叫链路了，比较常见的场景就是连表。什么是查询了，就是一个表内很多的查询条件。这两个词单独看都不是问题，但组合起来就出现了，A，B表都要连C。并且查询C里面一个值是否存在，这时候我们就希望C里面已经定义查询条件sql可以通用。这是个很困难的问题，因为一来查询条件不一定都是简单查询，也有可能需要条件触发，或者需要传参进去，二来会出现表别名的冲突问题。PHPZlc可以说完美的解决了这些问题，可以实现一个表中定义的查询条件sql在绝大多数的情况下可以无压力复用，串用。
   
4. **丰富的基础查询规则**

    对于任意字段都支持丰富的查询规则，in，like, 比较，is null 等等直接的查询规则，可以定义新的查询规则，可以对查询规则进行重写。
    

**看了这里，不要后退，这是个聪明的系统，很好使用，学习使用成本也很低。** [开始学习吧!!!!](/doc/repository/rule)
   
   
   
   
   
    

