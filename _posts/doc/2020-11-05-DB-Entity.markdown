---
title: 设计Entity
permalink: doc/db/entity
---

## 编程定义

1. Entity中应当定义最基本的定义，最普遍的验证。
   
   **最基本的定义：**
  
      人们可以在这个表的实体类中，找到关于这张表的全部定义，注释。
        
   **最普遍的验证：**     
        
      通过验证等一系列的手段，保证数据表最普遍，最基础的数据完整，数据可用。

2. Entity是面向对象写法的核心，要在使其不臃肿的情况下巧妙使用。

3. Entity是数据的最底层，可以有效的管理控制数据。

4. 保证数据完整性，可用性是Entity的第一要务。

## 创建实体及相关资源生成命令
  
1. 创建实体
  
   ```php
   php bin/console make:entity {entityClassName}
   ```

   `{entityClassName}` _选填_ 未指定的话则对话式询问，询问不指定则对所有实体生效


   **实体创建说明**
   
   1. 通常不建议使用命令行创建实体,直接创建类文件会比较便捷
   
   2. 实体指定id的生成模式时，如果项目现在或将来有分布式的需求，应该使用uuid的形式，否则可以使用自增ID的形式
   
        **UUID 代码模版(推荐方式)**
        
        ```php
        <?php        
        namespace App\Entity;
        
        use App\Repository\UserRepository;
        use Doctrine\ORM\Mapping as ORM;
        
        /**
         * @ORM\Entity(repositoryClass=UserRepository::class)
         * @ORM\Table(name="admin", options={"comment":"用户表"})
         */
        class User
        {
            /**
             * @var string
             *
             * @ORM\Column(name="id", type="string")
             * @ORM\Id()
             * @ORM\GeneratedValue(strategy="CUSTOM")
             * @ORM\CustomIdGenerator(class="PHPZlc\PHPZlc\Doctrine\SortIdGenerator")
             */
            private $id;
        }
        ```
        
        _PhpZlc对UUID进行了改造，其在保持唯一性的同时，增加了如自增ID一样的排序性，缺点在于最终生成的ID较长，（如果有更好的算法，希望与我们联系）_
        
        **自增ID代码模版**
        
        ```php
        <?php        
        namespace App\Entity;
        
        use App\Repository\UserRepository;
        use Doctrine\ORM\Mapping as ORM;
        
        /**
         * @ORM\Entity(repositoryClass=UserRepository::class)
         * @ORM\Table(name="admin", options={"comment":"用户表"})
         */
        class User
        {
            /**
             * @var string
             *
             * @ORM\Column(name="id", type="string")
             * @ORM\Id()
             * @ORM\GeneratedValue(strategy="AUTO")
             */
            private $id;
        }
        ```
      
   3. get-set,RepositoryClass
      
      1. 数据库增加新的实体和字段的时候,需要为新增的部分重新生成get-set方法，为新增的实体增加对应的RepositoryClass
    
      2. 数据库删除实体和字段的时候，需要手动移除get-set方法，和删除对应的RepositoryClass
   
      3. 要保证RepositoryClass和Entity保持一对一的关系
   
      4. 要保证get-set方法没有缺少和冗余
   
      **生成get-set,RepositoryClass**
     
      ```shell
      php bin/console make:entity {entityClassName} --regenerate
      ```
     
      **覆盖get-set,RepositoryClass**
     
      ```shell
      php bin/console make:entity {entityClassName} --regenerate --overwrite
      ```
      
      `{entityClassName}` _选填_ 未指定的话则对话式询问，询问不指定则对所有实体生效

## 常用字段写法示例

1. string 

    ```php
    /**
     * @var string
     * 
     * @ORM\Column(name="name", type="string", length=30 options={"comment":"名称"})
     */
    private $name;
   
   /**
    * @var string
    * 
    * @ORM\Column(name="content", type="text", options={"comment":"长文本"})
    */
   private $content;
    ```

2. boolean

    ```php
   /**
     * @var boolean
     *
     * @ORM\Column(name="is_disable", type="boolean", options={"comment":"是否禁用", "default":"0"})
     */
   private $isDisable = false;
   
   /**
    * @var boolean
    *
    * @ORM\Column(name="is_del", type="boolean", options={"comment":"是否删除", "default":"0"})
    */
   private $isDel = 0;
   
   
   /**
    * @var boolean
    *
    * @ORM\Column(name="is_built", type="boolean", options={"comment":"是否内置", "default":"0"})
    */
   private $isBuilt = false;
    ```

3. datetime

    ```php
   /**
    * @var \DateTime
    *
    * @ORM\Column(name="create_at", type="datetime", options={"comment":"创建时间"})
    */
   private $createAt;
    ```
   
4. date

    ```php
    /**
     * @var \DateTime
     *
     * @ORM\Column(name="date", type="date", options={"comment":"日期"})
     */
    private $date; 
    ```   

5. time
   
   ```php
   /**
    * @var \DateTime
    *
    * @ORM\Column(name="date", type="time", options={"comment":"时间"})
    */
   private $date; 
   ```   

5. int

    ```php
    /**
     * @var integer
     *
     * @ORM\Column(name="sort_value", type="integer", options={"comment":"排序值"})
     */
    private $sortValue = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="show_num", type="integer", options={"comment":"展现数"})
     */
    private $showNum = 0;
   ```

6. smallint

    ```php
    //在表的头部定义，一者作为备注说明含义，二者设为常量活静态方法，方便其他模块调用。
    const STATUS_RESERVATION = 1;

    const STATUS_RECORD = 2;

    const STATUS_COMPLETE = 3;

    const STATUS_CANCEL = 4;

    const STATUS_REFUND = 5;

    const STATUS_PAYMENT = 6;


    public static function getStatusArray()
    {
        return [
            self::STATUS_RESERVATION => '已预约',
            self::STATUS_RECORD => '已录制',
            self::STATUS_COMPLETE => '已完成',
            self::STATUS_CANCEL => '已取消',
            self::STATUS_REFUND => '已退款',
            self::STATUS_PAYMENT => '已支付'
        ];
    }
   
    /**
     * @var integer
     *
     * @ORM\Column(name="status", type="smallint", options={"comment":"订单状态"})
     */
    private $status;
    ```

7. simple_array(简单数组)

    ```php
    /**
     * @var array
     *
     * @ORM\Column(name="tags", type="simple_array", options={"comment":"标签"})
     */
    private $tags;
   ```
   
   _存储格式为:123,123,123_

8. array

    ```php
    /**
     * @var array
     *
     * @ORM\Column(name="files", type="array", options={"comment":"文件集合"})
     */
    private $files;
   ```
   
   _储存格式为对象序列化之后的结果，检索能力较差_

10. double

    ```php
    /**
     * @var string
     *
     * @ORM\Column(name="lng", type="decimal", precision=10, scale=6, options={"comment":"经度"})
     */
    protected $lng;

    /**
     * @var string
     *
     * @ORM\Column(name="lat", type="decimal", precision=10, scale=6, options={"comment":"纬度"})
     */
    protected $lat;
    
    /**
     * @var string
     *
     * @ORM\Column(name="amount", type="decimal", precision=10, scale=2, nullable=true, options={"comment":"价格"})
     */
    private $amount;
    ```

11. 外键

    **多对一**
    ```php
    /**
     * @var User
     *
     * @ORM\ManyToOne(targetEntity="App\Entity\User")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $user;
    ```
    
    **一对一**
    ```php
    /**
     * @var User
     *
     * @ORM\OneToOne(targetEntity="App\Entity\User")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $user;
    ```
    
## 新特性-表外字段

   _这是PHPZLC独有的特性,可以将子查询sql定义为字段，使其可以具有编程性，实现了Sql集中管理，提高了使用效率_
   
   ```php
    /**
     * @OuterColumn(name="site_domains", type="simple_array", sql="(SELECT GROUP_CONCAT(sd.site_domain) FROM site_domain sd WHERE sd.site_id = sql_pre.id),  options={"comment":"站点域名"}")
     */
    private $siteDomains;
   ```
   
   使用此字段，我们需要知道以下知识：
   
   1. 字段的type，支持原生的大多数类型，未来会考虑支持对象类型，但目前不支持。
   
   2. 字段`options`参数的当前支持`comment`选项，其他选项可以使用，但应该是没有效果，例如`default`。
   
   3. PHPZLC为使此特性完全融入到原有的机制上，不造成二次学习使用负担，做了很多的努力，所以该字段除了不具备写库能力，其作为查询，条件，排序都和正常字段无所差别。
   
   4. 此字段还支持`@AddRule`注释，保证表外字段的sql需要的资源得到足够保证。具体请学习[高级查询-规则章节](/doc/repository/rule)
    
      ```php
         @AddRule(name="id", value="1")
      ```    

   5. 当子查询中需要根据业务加入变量的时候，可以通过学习[高级查询-重新规则章节](/doc/repository/rule-rewriting)
   
## 字段发生变更后需要更新结构重新生成get-set方法

请阅读[创建使用数据库](/doc/db/start)章节。

## 添加验证约束

   在编程定义中我们聊到了**最普遍的验证**，其中一个重要的手段就是添加验证注释。这是symfony原生的功能。
   
   关于基础知识的学习，可以访问 [Symfony-Validate](https://symfony.com/doc/4.4/validation.html) (自行阅读)
   
   其如何和PHPZLC结合可以学习[验证](doc/validate)章节。

